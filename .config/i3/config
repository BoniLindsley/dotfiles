# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

# Use `xev`, `xmodmap` and `xmodmap -pke` to find key names.
# Common keys used include:
#
#   * shift   - Shift_L (0x32),  Shift_R (0x3e)
#   * lock    - Caps_Lock (0x42)
#   * control - Control_L (0x25),  Control_R (0x69)
#   * mod1    - Alt_L (0x40),  Meta_L (0xcd)
#   * mod2    - Num_Lock (0x4d)
#   * mod3
#   * mod4    - Super_L (0x85), Super_R (0x86), (also known as winkeys)
#             - Hyper_L (0xce),  Hyper_L (0xcf)
#   * mod5    - ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)
#   * Return  - enter key
#   * left, down, up, right - arrow keys
#   * plus, minus
#   * print   - print screen
#   * grave   - The ` key.
#   * Delete  - Seems to require a capital.

# A prefix key used for most commands.
set $mod mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:DejaVu Sans Mono 8
# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# ####
# Access terminal
set $terminal /home/boni/base/bin/urxvtcd
# New terminal
bindsym $mod+Return        exec $terminal
# New terminal, attaching to an existing tmux session.
bindsym $mod+controlReturn exec $terminal -e tmux attach
# New terminal, creating a new tmux session.
bindsym $mod+shift+Return  exec $terminal -e tmux

# kill focused window
bindsym $mod+shift+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run -b -nb \#090300 \
                                 -nf \#a5a2a2 \
                                 -sb \#4a4543 \
                                 -sf \#d6d5d4
## # There also is the (new) i3-dmenu-desktop which only displays applications
## # shipping a .desktop file. It is a wrapper around dmenu, so you need that
## # installed.
## bindsym $mod+d exec --no-startup-id i3-dmenu-desktop
## # Rofi is an application launcher based with more features.
## # However, its binary size is far larger.
## bindsym $mod+d exec rofi -show run

# ####
# 6.4. Focusing containers
# focus left|right|down|up
# focus parent|child|floating|tiling|mode_toggle
# focus output left|right|up|down|primary|<output>
# ####
# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# ####
# 6.5. Moving containers
# # Moves the container into the given direction.
# # The optional pixel argument specifies how far the
# # container should be moved if it is floating and
# # defaults to 10 pixels.
# move <left|right|down|up> [<px> px]
#
# # Moves the container either to a specific location
# # or to the center of the screen. If 'absolute' is
# # used, it is moved to the center of all outputs.
# move [absolute] position <pos_x> [px] <pos_y> [px]
# move [absolute] position center
#
# # Moves the container to the current position of the
# # mouse cursor. Only affects floating containers.
# move position mouse
# ####
# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

## # split in horizontal orientation
## bindsym $mod+Mod1+h split h
##
## # split in vertical orientation
## bindsym $mod+Mod1+v split v

## # change container layout (stacked, tabbed, toggle split)
## # bindsym $mod+s layout stacking
## bindsym $mod+w layout tabbed
## bindsym $mod+e layout toggle split

# change focus between tiling / floating windows
bindsym $mod+plus    focus mode_toggle
bindsym $mod+f       focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child
bindsym $mod+Shift+a focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+shift+1 move container to workspace 1
bindsym $mod+shift+2 move container to workspace 2
bindsym $mod+shift+3 move container to workspace 3
bindsym $mod+shift+4 move container to workspace 4
bindsym $mod+shift+5 move container to workspace 5
bindsym $mod+shift+6 move container to workspace 6
bindsym $mod+shift+7 move container to workspace 7
bindsym $mod+shift+8 move container to workspace 8
bindsym $mod+shift+9 move container to workspace 9
bindsym $mod+shift+0 move container to workspace 10

# ####
# 6.18. Reloading/Restarting/Exiting
# ####
# You can make i3 reload its configuration file with `reload`.
# You can also restart i3 inplace with the `restart` command
#   to get it out of some weird state (if that should ever happen)
#   or to perform an upgrade without having to restart your X session.
# To exit i3 properly, you can use the `exit` command,
#   however you don’t need to
#   (simply killing your X session is fine as well).

# Restart i3-wm inplace.
# (Preserves your layout/session, can be used to upgrade i3.)
bindsym $mod+Shift+r restart
## # Reload the configuration file
## bindsym $mod+Shift+w reload
## # Exit i3 (logs you out of your X session) after a confirmation.
## bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

## Shutdown, reboot, lock screen
set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate,\
 (r) reboot, (Shift+s) shutdown
set $Locker i3lock                           \
  --image=/home/boni/base/images/screensaver \
  --pointer=win                              \
  --show-failed-attempts
##  --color=000000

## bindsym $mod+Print mode "$mode_system"
## bindsym $mod+Shift+grave mode "$mode_system"
bindsym $mod+control+Delete mode "$mode_system"

mode "$mode_system" {
  # Procedure for locking:
  #   * Pause notification.
  #   * Turn the screen off.
  #   * Lock the screen without forking.
  #   * Resume notification once the lock is released.
  #   * Return to using default i3 hotkeys.
  bindsym l       exec --no-startup-id  pkill -u "$USER" -USR1 dunst \
                                        && xset dpms force off \
                                        && $Locker --nofork \
                                        && pkill -u "$USER" -USR2 dunst,\
                  mode "default"
  bindsym e       exec --no-startup-id i3-msg exit, \
                  mode "default"
  # Procedure for suspending and hibernate
  #   * Lock the screen with forking,
  #       so that the session resumes to a lock screen.
  #   * Sleep for 1 second to try to ensure the lock has started.
  #     Otherwise, it might immediate wake after suspending.
  #   * Do the actual system suspend or hibernate.
  #   * Return to using default i3 hotkeys.
  bindsym s       exec --no-startup-id $Locker \
                                       && sleep 1 \
                                       && systemctl suspend, \
                  mode "default"
  bindsym h       exec --no-startup-id $Locker \
                                       && sleep 1 \
                                       && systemctl hibernate, \
                  mode "default"
  bindsym r       exec --no-startup-id systemctl reboot, \
                  mode "default"
  bindsym Shift+s exec --no-startup-id systemctl poweroff -i, \
                  mode "default"
  bindsym m       exec --no-startup-id xset dpms force off, \
                  mode "default"
  bindsym $mod+control+s \
          exec --no-startup-id xset dpms force off, \
          mode "default"

  # back to normal: Enter or Escape
  bindsym Return  mode "default"
  bindsym Escape  mode "default"
}

# ####
# Changes brightness of display.
#   * This requires a Python script.
#     See: https://github.com/wavexx/acpilight/
#
#         pushd $HOME/base/bin  # Or any directory in the $PATH.
#         wget https://raw.githubusercontent.com/wavexx/acpilight/master/xbacklight
#         chmod 700 xbacklight
#
#     Add the following to the file `/etc/udev/rules.d/90-backlight.rules`:
#
#         SUBSYSTEM=="backlight", ACTION=="add", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
#         SUBSYSTEM=="backlight", ACTION=="add", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
#
#   * The keybinding about is given in
#
#         https://www.reddit.com/r/linux/comments/268wcy/managing_brightness_on_i3wm/
#
#     It also contains a simpler but less flexible implementation
#       for changing the brightness.
bindsym XF86MonBrightnessDown exec xbacklight -dec 5; \
                              exec xset s on; exec xset +dpms
bindsym XF86MonBrightnessUp   exec xbacklight -inc 5; \
                              exec xset s off; exec xset -dpms
bindsym shift+XF86MonBrightnessDown exec xbacklight -set 10; \
                                    exec xset s on; exec xset +dpms
bindsym shift+XF86MonBrightnessUp   exec xbacklight -set 50; \
                                    exec xset s off; exec xset -dpms

## # ####
## # Changes volume.
## #
## # From: https://faq.i3wm.org/question/125/how-to-change-the-systems-volume.1.html
## bindsym XF86AudioRaiseVolume exec --no-startup-id amixer -q set Master 5%+ unmute
## bindsym XF86AudioLowerVolume exec --no-startup-id amixer -q set Master 5%- unmute
## bindsym XF86AudioMute exec --no-startup-id amixer -q set Master toggle

# ####
# Changes volume - PulseAudio
# From: https://askubuntu.com/q/97936
bindsym XF86AudioRaiseVolume \
  exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% \
                    && pactl set-sink-mute   @DEFAULT_SINK@ 0
bindsym XF86AudioLowerVolume \
  exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% \
                    && pactl set-sink-mute   @DEFAULT_SINK@ 0
bindsym XF86AudioMute \
  exec --no-startup-id pactl set-sink-mute   @DEFAULT_SINK@ toggle


# Not using media control hotkeys and let software use it.

## # ####
## # Controls cmus.
## #
## bindsym XF86AudioPlay exec --no-startup-id cmus-remote --pause
## bindsym XF86AudioPrev exec --no-startup-id cmus-remote --prev
## bindsym XF86AudioNext exec --no-startup-id cmus-remote --next

# ####
# Controls mpd.
#
bindsym XF86AudioPlay exec --no-startup-id mpc --quiet toggle
bindsym XF86AudioPrev exec --no-startup-id mpc --quiet prev
bindsym XF86AudioNext exec --no-startup-id mpc --quiet next

# ### Multi-monitor setup
## set $refresh_monitor_mode \
##   xrandr --output HDMI-1 --auto --pos 1920x1080 \
##          --output eDP-1  --auto --pos 0x0
set $refresh_monitor_mode \
  xrandr --output HDMI-1 --auto --pos -1280x0 \
         --output DP-1   --auto --pos 1366x0 \
         --output eDP-1  --auto --pos 0x0
# Detect on start up.
exec --no-startup-id $refresh_monitor_mode

# Turn monitor off.
bindsym $mod+shift+b       \
  exec --no-startup-id     \
    xset s on              \
    && xset +dpms          \
    && sleep 1             \
    && xset dpms force off

set $decrease_brightness \
  xbacklight -dec 5    \
  && xset s on         \
  && xset +dpms
set $increase_brightness \
  xbacklight -inc 5    \
  && xset s off        \
  && xset -dpms

# Custom binding mode for monitor brightness.
set $mode_brightness [Brightness] \
  ($mod+b) Default; \
  ($mod+shift+b) Dim
bindsym $mod+b mode "$mode_brightness"
mode "$mode_brightness" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym control+bracketleft mode "default"
  bindsym Escape              mode "default"

  # ####
  # Changes brightness of display.
  bindsym XF86MonBrightnessDown                \
    exec --no-startup-id $decrease_brightness
  bindsym XF86MonBrightnessUp                  \
    exec --no-startup-id $increase_brightness
  bindsym k                                    \
    exec --no-startup-id $increase_brightness
  bindsym j                                    \
    exec --no-startup-id $decrease_brightness

  bindsym 1 exec --no-startup-id xbacklight -set 10; mode "default"
  bindsym 2 exec --no-startup-id xbacklight -set 20; mode "default"
  bindsym 3 exec --no-startup-id xbacklight -set 30; mode "default"
  bindsym 4 exec --no-startup-id xbacklight -set 40; mode "default"
  bindsym 5 exec --no-startup-id xbacklight -set 50; mode "default"
  bindsym 6 exec --no-startup-id xbacklight -set 60; mode "default"
  bindsym 7 exec --no-startup-id xbacklight -set 70; mode "default"
  bindsym 8 exec --no-startup-id xbacklight -set 80; mode "default"
  bindsym 9 exec --no-startup-id xbacklight -set 90; mode "default"
  # Set brightness to 50% and turn off screensaver.
  bindsym $mod+b                             \
    exec --no-startup-id xbacklight -set 50; \
    exec --no-startup-id xset s off;         \
    exec --no-startup-id xset -dpms;         \
    mode "default"
  # Set brightness to 10% and turn on screensaver.
  bindsym $mod+shift+b                       \
    exec --no-startup-id xbacklight -set 10; \
    exec xset s on;                          \
    exec xset +dpms;                         \
    mode "default"

  # ####
  # Refresh xrandr settings.
  # bindsym x exec --no-startup-id xrandr --output HDMI-1 --auto --pos 1920x1080 --output eDP-1 --auto --pos 0x0; mode "default"
  # bindsym x exec --no-startup-id xrandr --output HDMI-1 --auto --pos -1280x1024 --output eDP-1 --auto --pos 0x0; mode "default"
  bindsym x exec --no-startup-id $refresh_monitor_mode; mode "default"
}

# Custom binding mode for volume.
set $mode_volume [Volume] \
  ($mod+v) Mute; \
  ($mod+s) Loopback; \
  ($mod+q) Stop; \
  ($mod+space) Play/pause

bindsym $mod+v mode "$mode_volume"
mode "$mode_volume" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym control+bracketleft mode "default"
  bindsym Escape mode "default"

##  # ####
##  # Changes volume - ALSA
##  # From: https://faq.i3wm.org/question/125/how-to-change-the-systems-volume.1.html
##  bindsym XF86AudioRaiseVolume exec --no-startup-id amixer -q set Master 5%+ unmute
##  bindsym XF86AudioLowerVolume exec --no-startup-id amixer -q set Master 5%- unmute
##  bindsym XF86AudioMute exec --no-startup-id amixer -q set Master toggle
##
##  bindsym k exec --no-startup-id amixer -q set Master 5%+ unmute
##  bindsym j exec --no-startup-id amixer -q set Master 5%- unmute
##  bindsym m exec --no-startup-id amixer -q set Master toggle
##  bindsym v exec --no-startup-id amixer -q set Master toggle
##
##  bindsym 1 exec --no-startup-id amixer -q set Master  10% unmute; mode "default"
##  bindsym 2 exec --no-startup-id amixer -q set Master  20% unmute; mode "default"
##  bindsym 3 exec --no-startup-id amixer -q set Master  30% unmute; mode "default"
##  bindsym 4 exec --no-startup-id amixer -q set Master  40% unmute; mode "default"
##  bindsym 5 exec --no-startup-id amixer -q set Master  50% unmute; mode "default"
##  bindsym 6 exec --no-startup-id amixer -q set Master  60% unmute; mode "default"
##  bindsym 7 exec --no-startup-id amixer -q set Master  70% unmute; mode "default"
##  bindsym 8 exec --no-startup-id amixer -q set Master  80% unmute; mode "default"
##  bindsym 9 exec --no-startup-id amixer -q set Master  90% unmute; mode "default"
##  bindsym 0 exec --no-startup-id amixer -q set Master 100%; mode "default"
##  bindsym $mod+v \
##            exec --no-startup-id amixer -q set Master toggle; \
##            mode "default"
##  bindsym $mod+shift+v \
##            exec --no-startup-id amixer -q set Master 20% mute; \
##            mode "default"

  # ####
  # Changes volume - PulseAudio
  # From: https://askubuntu.com/q/97936
  bindsym XF86AudioRaiseVolume \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0
  bindsym XF86AudioLowerVolume \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0
  bindsym XF86AudioMute \
    exec --no-startup-id pactl set-sink-mute   @DEFAULT_SINK@ toggle

  bindsym k \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0
  bindsym j \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0

  bindsym 1 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 10% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 2 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 20% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 3 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 30% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 4 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 40% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 5 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 50% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 6 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 60% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 7 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 70% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 8 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 80% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 9 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 90% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym 0 \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ 100% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 0; \
    mode "default"
  bindsym $mod+v \
    exec --no-startup-id pactl set-sink-mute   @DEFAULT_SINK@ toggle; \
    mode "default"
  bindsym $mod+shift+v \
    exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@  20% \
                      && pactl set-sink-mute   @DEFAULT_SINK@ 1; \
    mode "default"

  ## # ####
  ## # Controls cmus.
  ## bindsym shift+XF86AudioPlay exec --no-startup-id cmus-remote --pause
  ## bindsym shift+XF86AudioPrev exec --no-startup-id cmus-remote --prev
  ## bindsym shift+XF86AudioNext exec --no-startup-id cmus-remote --next
  ## bindsym shift+space         exec --no-startup-id cmus-remote --pause; mode "default"
  ## bindsym shift+p             exec --no-startup-id cmus-remote --prev ; mode "default"
  ## bindsym shift+n             exec --no-startup-id cmus-remote --next ; mode "default"
  ## bindsym $mod+shift+space    exec --no-startup-id cmus-remote --pause; mode "default"
  ## bindsym $mod+shift+p        exec --no-startup-id cmus-remote --prev ; mode "default"
  ## bindsym $mod+shift+n        exec --no-startup-id cmus-remote --next ; mode "default"

  # ####
  # Controls mpd.
  bindsym XF86AudioPlay exec --no-startup-id mpc --quiet toggle
  bindsym XF86AudioPrev exec --no-startup-id mpc --quiet prev
  bindsym XF86AudioNext exec --no-startup-id mpc --quiet next
  bindsym space         exec --no-startup-id mpc --quiet toggle; mode "default"
  bindsym p             exec --no-startup-id mpc --quiet prev  ; mode "default"
  bindsym q             exec --no-startup-id mpc --quiet stop  ; mode "default"
  bindsym n             exec --no-startup-id mpc --quiet next  ; mode "default"
  bindsym $mod+space    exec --no-startup-id mpc --quiet toggle; mode "default"
  bindsym $mod+p        exec --no-startup-id mpc --quiet prev  ; mode "default"
  bindsym $mod+n        exec --no-startup-id mpc --quiet next  ; mode "default"
  bindsym $mod+q        exec --no-startup-id mpc --quiet stop  ; mode "default"

  # Controls mpd with ambient playlist.
  bindsym shift+XF86AudioPlay exec --no-startup-id mpc --quiet --port 6601 toggle
  bindsym shift+XF86AudioPrev exec --no-startup-id mpc --quiet --port 6601 prev
  bindsym shift+XF86AudioNext exec --no-startup-id mpc --quiet --port 6601 next
  bindsym shift+space         exec --no-startup-id mpc --quiet --port 6601 toggle; mode "default"
  bindsym shift+p             exec --no-startup-id mpc --quiet --port 6601 prev  ; mode "default"
  bindsym shift+q             exec --no-startup-id mpc --quiet --port 6601 stop  ; mode "default"
  bindsym shift+n             exec --no-startup-id mpc --quiet --port 6601 next  ; mode "default"
  bindsym $mod+shift+space    exec --no-startup-id mpc --quiet --port 6601 toggle; mode "default"
  bindsym $mod+shift+p        exec --no-startup-id mpc --quiet --port 6601 prev  ;; mode "default"
  bindsym $mod+shift+n        exec --no-startup-id mpc --quiet --port 6601 next  ;; mode "default"
  bindsym control+space       exec --no-startup-id mpc --quiet --port 6601 toggle; \
                              exec --no-startup-id mpc --quiet toggle; mode "default"
  bindsym $mod+control+space  exec --no-startup-id mpc --quiet --port 6601 toggle; \
                              exec --no-startup-id mpc --quiet toggle; mode "default"

  # ####
  # Controls PulseAudio loopback.
  bindsym s \
    exec --no-startup-id boni-setup-pulseaudio-loopback 1; \
    mode "default"
  bindsym $mod+s \
    exec --no-startup-id boni-setup-pulseaudio-loopback 1 0; \
    mode "default"
}

# ####
# 4.5. Binding modes
# ####
# Window properties / styling
# Custom binding mode for window property and styling.
set $mode_window [Window / resize] \
  ($mod+y) Sticky; \
  ($mod+t) Border
bindsym $mod+y mode "$mode_window"
mode "$mode_window" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym control+bracketleft mode "default"
  bindsym Escape mode "default"

  ## ####
  ## 6.6.  Sticky floating windows
  ## sticky enable|disable|toggle
  ## ####
  bindsym $mod+y       sticky toggle; mode "default"
  bindsym $mod+shift+y sticky toggle; \
                       floating toggle; \
                       [con_id="__focused__" floating] border normal; \
                       [con_id="__focused__" tiling  ] border none; \
                       mode "default"

  # ####
  # 6.15. Changing border style
  # border normal|pixel [<n>]
  # border none|toggle
  # ####
  ## # use window title, but no border
  ## bindsym $mod+t border normal 0
  ## # use no window title and a thick border
  ## bindsym $mod+y border pixel 3
  ## # use neither window title nor border
  # bindsym $mod+u border none
  bindsym $mod+t border toggle; mode "default"

  # ####
  # 7.1. Resizing containers/windows
  # resize grow|shrink <direction> [<px> px [or <ppt> ppt]]
  # resize set <width> [px] <height> [px]
  # ####
  # Pressing left will shrink the window’s width.
  # Pressing right will grow the window’s width.
  # Pressing up will shrink the window’s height.
  # Pressing down will grow the window’s height.
  bindsym Control+h resize shrink width  50 px
  bindsym Control+j resize grow   height 50 px
  bindsym Control+k resize shrink height 50 px
  bindsym Control+l resize grow   width  50 px

  bindsym h resize shrink width  10 px
  bindsym j resize grow   height 10 px
  bindsym k resize shrink height 10 px
  bindsym l resize grow   width  10 px

  bindsym Shift+h resize shrink width  1 px
  bindsym Shift+j resize grow   height 1 px
  bindsym Shift+k resize shrink height 1 px
  bindsym Shift+l resize grow   width  1 px

  # same bindings, but for the arrow keys
  bindsym Left  resize shrink width  10 px
  bindsym Down  resize grow   height 10 px
  bindsym Up    resize shrink height 10 px
  bindsym Right resize grow   width  10 px

  # Resize to a specific size
  bindsym 4 resize set  480 px  360 px
  # 564 + 2 (border) for 80 col in urxvt.
  bindsym 5 resize set  566 px
  bindsym shift+5 resize set  566 px  319 px
  bindsym 6 resize set  640 px  480 px
  bindsym 8 resize set  800 px  600 px
  bindsym 0 resize set 1024 px  768 px
  bindsym 2 resize set 1280 px 1024 px

  # ####
  # 6.2. Splitting containers
  # split vertical|horizontal|toggle
  # ####
  # split in horizontal orientation
  bindsym $mod+Mod1+h split horizontal
  # split in vertical orientation
  bindsym $mod+Mod1+v split vertical

  # ####
  # 6.3. Manipulating layout layout default|tabbed|stacking|splitv|splith
  # layout toggle [split|all]
  # layout toggle [split|tabbed|stacking|splitv|splith] \
  #               [split|tabbed|stacking|splitv|splith] ...
  # ####
  # change container layout (stacked, tabbed, toggle split)
  # bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split

  # enter fullscreen mode for the focused container
  bindsym $mod+s         fullscreen toggle; mode "default"
  bindsym $mod+control+f fullscreen toggle; mode "default"

  # toggle tiling / floating
  bindsym $mod+Shift+plus floating toggle; \
      [con_id="__focused__" floating] border normal; \
      [con_id="__focused__" tiling  ] border none; \
      mode "default"

  # change focus between tiling / floating windows
  bindsym $mod+plus    focus mode_toggle
  bindsym $mod+f       floating toggle; \
                       [con_id="__focused__" floating] border normal; \
                       [con_id="__focused__" tiling  ] border none; \
                       mode "default"
  bindsym $mod+shift+f sticky toggle; \
                       floating toggle; \
                       [con_id="__focused__" floating] border normal; \
                       [con_id="__focused__" tiling  ] border none; \
                       mode "default"

  # focus the parent container
  bindsym $mod+a focus parent

  # focus the child container
  #bindsym $mod+d focus child
  bindsym $mod+Shift+a focus child

  # ####
  # 6.19.  Scratchpad
  # move scratchpad
  # scratchpad show
  # ####
  # There are two commands to use any existing window as scratchpad window.
  # `move scratchpad` will move a window to the scratchpad workspace.
  # This will make it invisible until you show it again.
  # There is no way to open that workspace.
  # Instead, when using `scratchpad show`, the window will be shown again,
  #   as a floating window, centered on your current workspace
  #   (using `scratchpad show` on a visible scratchpad window
  #   will make it hidden again, so you can have a keybinding to toggle).
  # Note that this is just a normal floating window,
  #   so if you want to "remove it from scratchpad",
  #   you can simple make it tiling again (`floating toggle`).
  #
  # As the name indicates, this is useful for having a window
  #   with your favorite editor always at hand.
  # However, you can also use this
  #   for other permanently running applications
  #   which you don’t want to see all the time:
  #   your music player, alsamixer, maybe even your mail client…?
  #
  # Show the next scratchpad window
  bindsym $mod+minus [instance="^(?!(?:pad|menu)$)"] scratchpad show; \
                     mode "default"
  bindsym $mod+e     [instance="^(?!(?:pad|menu)$)"] scratchpad show; \
                     mode "default"
  # Make the currently focused window a scratchpad
  bindsym $mod+Shift+minus move scratchpad; mode "default"
  bindsym $mod+Shift+e     move scratchpad; mode "default"

  ## ####
  ## 6.10. Moving containers/workspaces to RandR outputs
  ## move container to output left|right|down|up|current|primary|<output>
  ## move workspace to output left|right|down|up|current|primary|<output>
  ## ####
  ## To move a container to another RandR output
  ##   (addressed by names like LVDS1 or VGA1)
  ##   or to a RandR output identified by a specific direction
  ##   (like left, right, up or down).
  bindsym $mod+shift+1 move workspace to output primary; mode "default"
  bindsym $mod+shift+2 move workspace to output HDMI-1; mode "default"
  bindsym $mod+shift+3 move workspace to output DP-1; mode "default"
}

## ## ####
## ## 4.16. Automatically putting clients on specific workspaces
## ## assign <criteria> [→] [workspace] <workspace>
## ## ####
## ## To get the instance and class of a window, you can use xprop.
## ## After clicking on the window, you will see the following output:
## ##     WM_CLASS(STRING) = "irssi", "URxvt"
## ## The first part of the WM_CLASS
## ##   is the instance ("irssi" in this example),
## ##   the second part is the class ("URxvt" in this example).
## ## ####
## assign [class="^MuPDF$"] 1
## assign [class="^Firefox-esr$"] 2
## assign [class="^Firefox$"] 2
## assign [class="^discord$"] 2
assign [class="^mpv$"] 4
## assign [class="^vlc$"] 4
## assign [class="^Springlobby$"] 5
## assign [class="^Dolphin-emu$"] 5
## assign [class="^Mainwindow.py$"] 5  # For PlayOLinux.
## assign [class="^spring$"] 5
## assign [class="^Steam$"] 5
## assign [class="^VirtualBox$"] 5
## assign [class="^VirtualBox Machine$"] 5
## assign [class="^VirtualBox Manager$"] 5
## assign [class="^Wine$"] 5
## assign [class="^Godot$"] 5

## ####
## 4.13. Don’t focus window upon opening
## no_focus <criteria>
## no_focus [window_role="pop-up"]
## no_focus [class=".*" window_role="(?!pop-up)" floating]
## ####
## When a new window appears, it will be focused.
## The no_focus directive allows preventing this from happening
##   and must be used in combination with [command_criteria].
##
## Note that this does not apply to all cases,
##   e.g., when feeding data into a running application
##   causing it to request being focused.
## To configure the behavior in such cases,
##   refer to [focus_on_window_activation].
##
## `no_focus` will also be ignored for the first window on a workspace
##   as there shouldn’t be a reason to not focus the window in this case.
## This allows for better usability in combination with workspace_layout.
## ####
# Do not allow focus stealing by any window even on first launch,
# unless it is floating, such as a dialog.
no_focus [tiling]

## ####
## 4.20. Mouse focus
## focus_follows_mouse yes|no
## ####
# Do not change focus when the mouse moves to a different window.
focus_follows_mouse no

## ####
## 4.26. Automatic back-and-forth when switching to the current workspace
## workspace_auto_back_and_forth yes|no
## ####
## This configuration directive
##   enables automatic workspace back_and_forth (see [back_and_forth])
##   when switching to the workspace that is currently focused.
##
## For instance: Assume you are on workspace "1: www"
##   and switch to "2: IM" using mod+2
##   because somebody sent you a message.
## You don’t need to remember where you came from now,
##   you can just press $mod+2 again to switch back to "1: www".
## ####
#workspace_auto_back_and_forth no

## ####
## 4.27. Focus on window activation
## focus_on_window_activation smart|urgent|focus|none
## ####
# Mark new windows as urgent instead of stealing focus.
focus_on_window_activation urgent

# ####
# 4.10. Border style for new windows
# new_window normal|none|pixel
# new_window normal|pixel <px>
# new_float normal|none|pixel
# new_float normal|pixel <px>
# ####
# Remove window borders
new_window pixel 1
new_float normal

# ####
# 4.11. Hiding borders adjacent to the screen edges
# hide_edge_borders none|vertical|horizontal|both|smart
# ####
# The "smart" setting hides borders
#   on workspaces with only one window visible,
#   but keeps them on workspaces with multiple windows visible.
# Default is none.
# ####
hide_edge_borders smart

# ####
# 4.19. Changing colors
# <colorclass> <border> <background> <text> <indicator> <child_border>
# ####
# Where colorclass can be one of:
#
#   * client.focused
#       A client which currently has the focus.
#   * client.focused_inactive
#       A client which is the focused one of its container,
#         but it does not have the focus at the moment.
#   * client.unfocused
#       A client which is not the focused one of its container.
#   * client.urgent
#       A client which has its urgency hint activated.
#   * client.placeholder
#       Background and text color are used
#         to draw placeholder window contents (when restoring layouts).
#       Border and indicator are ignored.
#   * client.background
#       Background color which will be used to paint
#         the background of the client window on top of which
#         the client will be rendered.
#       Only clients which do not cover the whole area of this window
#         expose the color.
#       Note that this colorclass only takes a single color.
#
# Colors are in HTML hex format (#rrggbb).
#
# Note that for the window decorations,
#   the color around the child window is the "child_border",
#   and "border" color is only the two thin lines around the titlebar.
# The indicator color is used for indicating
#   where a new window will be opened.
# For horizontal split containers,
#   the right border will be painted in indicator color,
#   for vertical split containers, the bottom border.
# This only applies to single windows within a split container,
#   which are otherwise indistinguishable
#   from single windows outside of a split container.

# class                 border  backgr. text    indicator child_border
client.focused          #5c5855 #090300 #a5a2a2 #090300   #5c5855
client.focused_inactive #5c5855 #090300 #5c5855 #090300   #3a3432
client.unfocused        #3a3432 #090300 #5c5855 #090300   #3a3432
client.urgent           #db2d20 #090300 #5c5855 #090300   #db2d20
client.placeholder      #000000 #090300 #5c5855 #000000   #3a3432

client.background       #090300

## #####
## ## 4.9. Layout mode for new containers
## ## workspace_layout default|stacking|tabbed
# ####
workspace_layout tabbed

## ####
## 6.1. Executing applications (exec)
## ####
#Debian seems to have a Dunst systemd service
#  as of late 2019 Jul in Bullseye.
## Launch dunst (notification) on startup.
#exec --no-startup-id dunst
# Wallpaper
exec --no-startup-id feh --no-fehbg --bg-fill ~/base/images/wallpaper
# Keyboard layout using `IBus`.
exec --no-startup-id ibus-daemon --daemonize --xim

## ####
## 5. Configuring i3bar
## ####
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
  ## ## ####
  ## ## 5.2. Statusline command
  ## ## ####
  ## status_command python3 ~/.config/i3/pystatus.py
  ## ####
  ## 5.3. Display mode
  ## mode dock|hide|invisible
  ## hidden_state hide|show
  ## modifier <Modifier>|none
  ## ####
  mode hide
  modifier none
  ## ####
  ## 5.6. Position
  ## position top|bottom
  ## ####
  position bottom
  ## ####
  ## 5.8. Tray output
  ## tray_output none|primary|<output>
  ## ####
  # Note that you might not have a primary output configured yet.
  # To do so, run:
  #     xrandr --output <output> --primary
  tray_output primary
}

## ####
## 6.21. i3bar control
## bar hidden_state hide|show|toggle [<bar_id>]
## bar mode dock|hide|invisible|toggle [<bar_id>]
## ####
# Toggle between hide state and show state
bindsym $mod+i       bar hidden_state toggle
## bindsym $mod+grave bar hidden_state toggle
# Toggle between dock mode and hide mode
bindsym $mod+shift+i bar mode toggle

# ####
# 4.5. Binding modes
# ####
# Custom binding mode for Timewarrior
set $mode_timewarrior [($mod+t) Timewarrior] \
  ($mod+t) status; \
  ($mod+T) stop; \
  ($mod+ctrl+t) cancel; \
  ($mod+w) PhD; \
  ($mod+s) Sleep; \
  ($mod+p) Programming; \
  ($mod+a) Anime; \
  ($mod+m) Manga; \
  ($mod+r) continue;
bindsym $mod+t mode "$mode_timewarrior"
mode "$mode_timewarrior" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym control+bracketleft mode "default"
  bindsym Escape              mode "default"

  # ####
  # 6.1. Executing applications (exec)
  # exec [--no-startup-id] <command>
  # ####
  bindsym $mod+t \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew)"; \
    mode "default"
  bindsym $mod+shift+t \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew stop)"; \
    mode "default"
  bindsym $mod+control+t \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew cancel)"; \
    mode "default"
  bindsym $mod+w \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew start PhD)"; \
    mode "default"
  bindsym $mod+s \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew start Sleep)"; \
    mode "default"
  bindsym $mod+p \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew start Programming)"; \
    mode "default"
  bindsym $mod+a \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew start Anime)"; \
    mode "default"
  bindsym $mod+m \
    exec --no-startup-id \
      notify-send "Timewarrior" "$(timew start Manga)"; \
    mode "default"
}

## ####
## 4.29. Drawing marks on window decoration
## show_marks yes|no
## ####
#show_marks yes
show_marks no

# ####
# 6.19.  Scratchpad
# move scratchpad
# scratchpad show
# ####
# There are two commands to use any existing window as scratchpad window.
# `move scratchpad` will move a window to the scratchpad workspace.
# This will make it invisible until you show it again.
# There is no way to open that workspace.
# Instead, when using `scratchpad show`, the window will be shown again,
#   as a floating window, centered on your current workspace
#   (using `scratchpad show` on a visible scratchpad window
#   will make it hidden again, so you can have a keybinding to toggle).
# Note that this is just a normal floating window,
#   so if you want to "remove it from scratchpad",
#   you can simple make it tiling again (`floating toggle`).
#
# As the name indicates, this is useful for having a window
#   with your favorite editor always at hand.
# However, you can also use this
#   for other permanently running applications
#   which you don’t want to see all the time:
#   your music player, alsamixer, maybe even your mail client…?

# Show the next scratchpad window
bindsym $mod+minus [instance="^(?!(?:pad|menu)$)"] scratchpad show
# Make the currently focused window a scratchpad
bindsym $mod+Shift+minus move scratchpad

# Create and show scratchpad windows named "pad".
# The created terminals starts `tmux` directly.
# So terminating `tmux`  automatically terminals the terminals.
bindsym $mod+Shift+e exec \
  $terminal -name pad -e tmux new-session -A -s pad
# Show a specific scratchpad window
bindsym $mod+e [instance="pad"] scratchpad show

## ####
## 4.12. Arbitrary commands for specific windows (for_window)
## for_window <criteria> <command>
## ####
## With the for_window command, you can let i3 execute any command
##   when it encounters a specific window.
## This can be used to set windows to floating
##   or to change their border style, for example.
for_window [instance="pad"] \
  move scratchpad; \
  scratchpad show; \
  move position center; \
  resize set 566 px 669 px

## ####
## 7.3. VIM-like marks (mark/goto)
## mark [--add|--replace] [--toggle] <identifier>
## [con_mark="identifier"] focus
## unmark <identifier>
## ####

bindsym $mod+control+1 [con_mark="1"] focus
bindsym $mod+control+2 [con_mark="2"] focus
bindsym $mod+control+3 [con_mark="3"] focus
bindsym $mod+control+4 [con_mark="4"] focus
bindsym $mod+control+5 [con_mark="5"] focus

bindsym $mod+control+shift+1 mark --add 1; mode "default"
bindsym $mod+control+shift+2 mark --add 2; mode "default"
bindsym $mod+control+shift+3 mark --add 3; mode "default"
bindsym $mod+control+shift+4 mark --add 4; mode "default"
bindsym $mod+control+shift+5 mark --add 5; mode "default"

# ####
# 4.5. Binding modes
# ####
# Custom binding mode for ViM-like marks.
set $mode_mark_jumping [ViM-like mark jumping]
bindsym $mod+apostrophe mode "$mode_mark_jumping"
bindsym $mod+g mode "$mode_mark_jumping"
bindsym $mod+shift+g mode "$mode_mark_jumping"
mode "$mode_mark_jumping" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym control+bracketleft mode "default"
  bindsym Escape mode "default"

  bindsym $mod+a [con_mark="a"] focus; mode "default"
  bindsym $mod+e [con_mark="e"] focus; mode "default"
  bindsym $mod+q [con_mark="q"] focus; mode "default"
  bindsym $mod+r [con_mark="r"] focus; mode "default"
  bindsym $mod+t [con_mark="t"] focus; mode "default"
  bindsym $mod+w [con_mark="w"] focus; mode "default"
  bindsym $mod+shift+a mark --add a; mode "default"
  bindsym $mod+shift+e mark --add e; mode "default"
  bindsym $mod+shift+q mark --add q; mode "default"
  bindsym $mod+shift+r mark --add r; mode "default"
  bindsym $mod+shift+t mark --add t; mode "default"
  bindsym $mod+shift+w mark --add w; mode "default"
}


# ###############
# Hotkey sequence
# ###############

set $mode_boni_applications [Custom][Applications]\
  (space) Launcher;\
  [/]
mode "$mode_boni_applications" {
  bindsym Control+bracketleft mode "default"
  bindsym Escape mode "default"
  # Start dmenu, a program launcher.
  bindsym space \
    exec --no-startup-id \
      dmenu_run -b \
        -nb \#090300 \
        -nf \#a5a2a2 \
        -sb \#4a4543 \
        -sf \#d6d5d4, \
    mode "default"
  # # There also is the (new) i3-dmenu-desktop
  # # which only displays applications shipping a .desktop file.
  # # It is a wrapper around dmenu, so you need that installed.
  # bindsym space exec --no-startup-id i3-dmenu-desktop, mode "default"
  # # Rofi is an application launcher based with more features.
  # # However, its binary size is far larger.
  # bindsym space exec --no-startup-id rofi -show run, mode "default"
}

set $mode_boni_mark [Custom][Mark]\
  (letter) Set;\
  [/]
mode "$mode_boni_mark" {
  bindsym Control+bracketleft mode "default"
  bindsym Escape mode "default"
  # Set Vim marks.
  bindsym a mark --add a; mode "default"
  bindsym e mark --add e; mode "default"
  bindsym q mark --add q; mode "default"
  bindsym r mark --add r; mode "default"
  bindsym t mark --add t; mode "default"
  bindsym w mark --add w; mode "default"
}

set $mode_boni_mark_jump [Custom][Mark jump]\
  (letter) Jump;\
  [/]
mode "$mode_boni_mark_jump" {
  bindsym Control+bracketleft mode "default"
  bindsym Escape mode "default"
  # Jump to Vim marks.
  bindsym a [con_mark="a"] focus; mode "default"
  bindsym e [con_mark="e"] focus; mode "default"
  bindsym q [con_mark="q"] focus; mode "default"
  bindsym r [con_mark="r"] focus; mode "default"
  bindsym t [con_mark="t"] focus; mode "default"
  bindsym w [con_mark="w"] focus; mode "default"
}

set $mode_boni_system [Custom][System]\
  (d)isplay off; \
  (e)xit;\
  (h)ibernate;\
  (l)ock;\
  (r)eload;\
  (R)eboot;\
  (s)uspend;\
  (S)hutdown;\
  [/]
mode "$mode_boni_system" {
  bindsym Control+bracketleft mode "default"
  bindsym Escape mode "default"

  # Display off
  bindsym d \
    exec --no-startup-id \
      xset s on \
      && xset +dpms \
      && sleep 1 \
      && xset dpms force off, \
    mode "default"
  # Exit window manager, back to display manager or TTY.
  bindsym e \
    exec --no-startup-id \
      i3-msg exit, \
    mode "default"
  # Procedure for hibernating and suspending:
  # -   Lock the screen with forking,
  #     so that the session resumes to a lock screen.
  # -   Sleep for 1 second to try to ensure the lock has started.
  #     Otherwise, it might immediate wake after suspending.
  # -   Do the actual system suspend or hibernate.
  # -   Return to using default i3 hotkeys.
  bindsym h \
    exec --no-startup-id \
      $Locker \
      && sleep 1 \
      && systemctl hibernate, \
    mode "default"
  # Procedure for locking:
  # -   Pause notification.
  # -   Turn the screen off.
  # -   Lock the screen without forking.
  # -   Resume notification once the lock is released.
  # -   Return to using default i3 hotkeys.
  bindsym l \
    exec --no-startup-id \
      pkill -u "$USER" -USR1 dunst \
      && xset dpms force off \
      && $Locker --nofork \
      && pkill -u "$USER" -USR2 dunst,\
    mode "default"
  # Reload i3-wm config.
  bindsym r restart
  # Restart system.
  bindsym R \
    exec --no-startup-id \
      systemctl reboot, \
    mode "default"
  # Suspend system.
  bindsym s \
    exec --no-startup-id \
      $Locker \
      && sleep 1 \
      && systemctl suspend, \
    mode "default"
  # Shutdown system.
  bindsym Shift+s \
    exec --no-startup-id \
      systemctl poweroff -i, \
    mode "default"
}

set $mode_boni [Custom]\
  (a)pplications;\
  (m)ark;\
  (z) System;\
  (') Mark jump;\
  [/]
bindsym $mod+ctrl+a mode "$mode_boni"
bindsym $mod+ctrl+d mode "$mode_boni"
mode "$mode_boni" {
  # Cancel mode change.
  # The key bracketleft is `[`.
  bindsym Control+bracketleft mode "default"
  bindsym Escape mode "default"

  bindsym a mode "$mode_boni_applications"
  bindsym m mode "$mode_boni_mark"
  bindsym z mode "$mode_boni_system"
  bindsym apostrophe mode "$mode_boni_mark_jump"
}
